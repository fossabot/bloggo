<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>relearning how to draw</title>
      <link href="/2020/03/30/relearning-how-to-draw/"/>
      <url>/2020/03/30/relearning-how-to-draw/</url>
      
        <content type="html"><![CDATA[<p>some time ago, i read someone’s blog post about learning how to learn. i couldn’t find that post (if you’ve read it and remember the source please let me know so i can link it here!), so instead i’ll loosely summarize what i remember from it (there may be inaccuracies in my recollection). the blog post involved an amateur bowler. he started off with a technique he developed himself that was pretty good - in fact, good enough for him to defeat most people that he was bowling with in his close, local circle of friends. however, when he started competing in larger tournaments with more people, he discovered that he had been nothing but a big fish in a very small pond. a lot of his competitors had learned bowling properly, with a different technique. our original bowler convinced himself that he could continue to succeed in competitions using his own improper technique, but soon discovered he had hit a roadblock - he could not manage to progress higher than his current score, no matter how many hours he practiced or how many competitions he bowled in. so he settled down and tried to learn the proper techniques for bowling, but realized that he had to unlearn the improper technique that he had grown used to using first.</p><p>there are two lessons i grasped from this blog post: </p><ol><li>to really master something, you should learn the fundamentals, and learn them correctly. this involves a lot of dedicated practice - drilling things over and over until you can deconstruct them, understand them from bottom to top, and use different skills together. and most importantly, <em>not</em> skipping over something you don’t truly understand just to get to the more interesting parts, which is something that i have done in the past. this can lead to you learning <strong>bad habits</strong>, which as our bowler realized, can be a pain to unlearn in the future. also, practicing a skill without purpose isn’t much better than not practicing at all. (all those hours you put towards those 10,000 hours of work should be deliberate, purposeful practice. otherwise, you’re just doing the same thing over and over - but not improving at all.)</li><li>you don’t know how good you are at something if you’re not measuring with the right ruler. the bowler thought he was a pretty amazing bowler until he started bowling in the big leagues. i thought i was a pretty good artist until i joined instagram and realized how many amazing, talented artists were out there, and how much better their works were than mine. you need to find a reference or develop some amount of “taste” to know what expertise and mastery of your chosen skills look like. then you can start deconstructing that skill and figuring out how to get there. if you don’t even know what mastery looks like, how do you know what to work on?</li></ol><p>starting on march 18, 2020, i’ve been trying to draw at least an hour a day, starting back on fundamentals from this website called <a href="https://drawabox.com" target="_blank" rel="noopener">drawabox</a> that i found. i realized that i hit a roadblock with my art awhile ago - i think for two main reasons. </p><p>the first is a lack of technical skill. even though i took some art classes when i was much younger, i’ve either forgotten a lot or just haven’t learned how to draw from construction very properly. and i haven’t been very conscientious about incorporating those technical skills when i’ve been drawing in the past couple of years. additionally, i realized that a lot of the art lessons i was taught when i was younger were based on observation - how to draw something by staring at a reference image and drawing what you see instead of what you know. the new exercises i’ve been doing are focused on drawing something from construction - understanding the forms and shapes beneath the object and understanding how those forms interact with each other in 3d space. (i’m not even getting into understanding how light, color, etc. works yet!) a lot of these exercises end up also using reference pictures, but the ultimate goal in the end is to be able to construct images purely using your understanding of what forms you need to use and what these forms might look like when drawn flat on a page, based on the perspective you’re viewing them from (of course, you can - and probably should - use references to confirm your understanding, but this technique helps you eventually be able to construct images from imagination). </p><p>but the funny thing about drawing from imagination is that you have to have that imagination first. which brings me to the second thing that i think i lack at the moment - creativity. i don’t have any particular stories to tell, themes, emotions, etc. to convey, and in the past i’ve drawn mostly to create something aesthetically beautiful. and while i don’t think there’s anything wrong with creating art simply to make something beautiful, or to destress, i think my own work is somewhat flat because i’ve mostly drawn for those reasons in the past. i feel like my art lacks meaning and purpose. i don’t really have an answer to this issue either. i was hoping that my lack of creativity was caused by me not being able to accurately convey what i wanted to due to lack of technical ability, but i’m starting to think that it’s an entirely separate problem. i think there are ways to become more creative - like purposefully imagining stories or ideas or using prompts to come up with new ideas. but i think this is a skill that i’ll have to wait to develop until i become more technically capable. </p><p>(this is on a tangent, but i’m amused by how many people have told me they think i’m creative because i draw. i’ve never felt that i was creative simply because i could look at a reference photo and render it passably well. i really admire people who can take an idea and make it their own or come up with some new, original way to express something. i’d love to learn design someday, because i think design is really all about ideas. aesthetics are important too, of course. but without ideas behind it, it’s all shallow and empty.)</p><p>also, here are some of the insects i drew for lesson 3 of the drawabox exercises:<br><a href="https://i.imgur.com/v0gZ27N.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/v0gZ27N.jpg" width="50%" class="figure"/></a><a href="https://i.imgur.com/1PceeF3.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/1PceeF3.jpg" width="50%" class="figure"/></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> public </tag>
            
            <tag> learning how to learn </tag>
            
            <tag> thoughts </tag>
            
            <tag> art </tag>
            
            <tag> drawabox </tag>
            
            <tag> self improvement </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>some thoughts on notetaking tools</title>
      <link href="/2020/03/02/finding-the-right-tool-for-personal-notes-organization/"/>
      <url>/2020/03/02/finding-the-right-tool-for-personal-notes-organization/</url>
      
        <content type="html"><![CDATA[<p>I’ve started running into the same problem as many of my friends and coworkers: my personal notes are all over the place. I’ve got scattered notes in Google Keep, reference documentation and general notes in Dynalist, spreadsheets in Google Sheets, a couple of kanban boards in Trello, and a brief flirtationship with Notion. There’s a list of tools that I have yet to try out: Roam, Todoist, Things, Evernote, Bear, Airtable.</p><p>I think my issue might be that my requirements are too broad - there’s nothing out there that does everything I want in one place satisfactorily. (Maybe I should be satisficing instead of aiming for perfection.)</p><p>My requirements (followed by their priority ranking on a sliding scale, where 1 is “nice to have” and 10 is “absolutely essential, I won’t use this tool unless it has this feature”):</p><ul><li>native daily note-taking section, for todos (7)</li><li>checklists (10)</li><li>subnotes/pages or nested hierarchies (10)</li><li>table/spreadsheet functionality (? - I’ve debated the priority of this - Google Sheets works well, it just annoys me to have my notes in different places. There’s probably a reason why so few of the existing apps out there have this functionality.)</li><li>nice UI/UX - especially mobile experience (10 - It’s hard for me to describe why something “feels” nice - speed is definitely part of it, but besides that, using the tool needs to feel intuitive and easy, it should ideally “click”.)<ul><li>fast, clean, easy to quickly take notes &amp; make new notes (10)</li></ul></li><li>“page lock” feature, preventing editing of locked notes/pages (1)</li><li>picture upload (2)</li><li>markdown support &amp; formatting functionality (5)</li><li>organizational features (8)<ul><li>search (10)</li><li>tagging (5)</li></ul></li><li>allows sharing certain notes (1)</li><li>works well across different platforms (4)</li><li>encrypted/secure notes (2 - Nice to have, although anything that actually needs securing would be stored in my password management tool.)</li><li>calendar integration (1)</li><li>reminders (1)</li><li>kanban board integration (?)</li></ul><p>How much am I willing to pay for a notetaking/personal organization app? I much prefer one time fees over subscription based pricing models, even though I understand why so many companies are switching over to the latter. For me it’s just a feeling of disliking those loose strings, although if I really think about it, subscription fees for software isn’t any different than the monthly fee I pay for water or internet and probably won’t be such a big deal to remember if I keep track of what I’m paying for. So I’ll leave pricing out of this comparison for now, since I’m fairly flexible with price.</p><p>At some point I’ll probably use a spreadsheet to track scores for the different requirements for all the notetaking apps I’m considering, and then weigh the options. What I’d really love is some combination of Google Keep and Dynalist/Notion, with nice/simple checklists but also the ability to make full fledged pages with adequate formatting. A daily notes/todo section would be a plus. But maybe such an app would be a mess, since it tries to do everything. That’d be a fun little design exercise.</p>]]></content>
      
      
      
        <tags>
            
            <tag> ramblings </tag>
            
            <tag> blog </tag>
            
            <tag> public </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    <entry>
      <title>Getting Unstuck</title>
      <link href="/2019/02/16/getting-unstuck/"/>
      <url>/2019/02/16/getting-unstuck/</url>
      
        <content type="html"><![CDATA[<p><strong>Estimated Reading Time: 5 Minutes</strong></p><p><em>Disclaimer: This blog post is mostly for my own reference, and to practice technical writing.</em></p><p>Have you ever gotten stuck when trying to tackle something entirely new? You have a vague picture of where you are and where you want to be, but everything else in between feels like an ugly black box full of hidden complexity that you don’t understand (even attempting to read a full sentence of documentation can be a trying task if you don’t understand all the unfamiliar terminology being used).</p><p>That’s why it’s important to learn how to learn – to effectively unstick yourself, especially when there isn’t anyone around to help you.</p><p>Here are the steps I’ve followed, in order, when trying to get unblocked. These steps are specifically optimized for getting unstuck quickly and efficiently, but that shouldn’t be where you stop - try to really understand the system you’re working on. This will save time later on, especially if you’ll be working in the same codebase in the future.</p><hr><h1 id="1-Run-test-code"><a href="#1-Run-test-code" class="headerlink" title="1. Run test code."></a>1. <strong>Run test code.</strong></h1><p>  If what you’re trying to debug has tests, run them! The stack traces can lead you to where the problem might be. If there are no tests, write some!</p><p>  Other tactics include (but are not limited to): putting print statements everywhere to figure out where in the program things went wrong, refactoring your code to make reasoning easier, looking at any logs or metrics you may have, or running a debugger to step through your code. (Although the last suggestion may not scale with larger or more complicated projects.)</p><h1 id="2-Shamelessly-search-everything"><a href="#2-Shamelessly-search-everything" class="headerlink" title="2. Shamelessly search everything."></a>2. <strong>Shamelessly search everything.</strong></h1><p>  If you think you’ve identified the error or have a basic understanding of what to search for, other people may have faced the exact same problem as you are facing. Search on Google for a solution or any leads! (Be aware that Google searching can also lead you down the wrong path.)</p><p>  If your organization uses Slack, Stack Overflow, Notion, or any database of past answered questions specific to the software you’re working on, now would be the time to utilize those resources. If you find a solution through your search, try to understand it as thoroughly as you can (as time permits) before moving on.</p><h1 id="3-Look-at-existing-examples"><a href="#3-Look-at-existing-examples" class="headerlink" title="3. Look at existing examples."></a>3. <strong>Look at existing examples.</strong></h1><p>  Oftentimes you can look at old PRs or other examples of what you’re trying to accomplish and pattern match.</p><p>  A lot of engineers use pattern matching to unblock themselves briefly without truly grokking the code they’re copy-pasting into their programs. Sometimes it’s necessary in the interest of time (or impatience), but more often than not this practice leads to bigger problems down the line when those engineers are forced to debug code they never really understood, with assumptions they’ve made about the code that are likely incorrect. I’ve been guilty of this in the past, unfortunately.</p><p>  <strong>Don’t just stop at pattern matching.</strong> Try to figure out what is actually happening in the code that you’re writing.</p><h1 id="4-Read-the-documentation"><a href="#4-Read-the-documentation" class="headerlink" title="4. Read the documentation."></a>4. <strong>Read the documentation.</strong></h1><p>  RTFM. Do the reading. Slow down. You may have a bad habit of just skipping to the part that you need to know. If you have the time, it doesn’t cost you to read the whole thing.</p><p>  If you’re having trouble understanding a sentence, slow down and focus individually on each word you don’t understand. Try to understand those terms first, and then go back and reread the sentence. Have patience. Learning takes time and you won’t always get it after the first read, even if you’re the most intelligent human being in the world.</p><h1 id="5-Read-the-code"><a href="#5-Read-the-code" class="headerlink" title="5. Read the code."></a>5. <strong>Read the code.</strong></h1><p>  If reading the documentation wasn’t as helpful as expected, or if there’s little or no documentation for the software you’re working on, try reading the source code. Focus on where functions are being called and what each function is doing. Take notes or draw diagrams in a notebook if it makes it easier for you to understand how moving pieces fit together. It may help at this point to identify or understand which moving piece the error is originating from, either by testing each piece sequentially, or turning things off and on again to see what works.</p><p>  This step may not be as helpful, especially if the code is poorly documented/commented or organized in a way that doesn’t make sense to people who lack the necessary context.</p><h1 id="6-Ask-for-help"><a href="#6-Ask-for-help" class="headerlink" title="6. Ask for help."></a>6. <strong>Ask for help.</strong></h1><p>  As important as the skill of self-learning is, an almost equally important skill is knowing when to stop banging your head against a brick wall. Sometimes the problem is just too insurmountable for you to solve on your own. Maybe you lack the necessary history and context that another engineer would know, or you’ve made an assumption that led you down the wrong rabbit hole for hours.</p><p>  You need to know when to stop and ask for help. Don’t expect other engineers to ask if you need help, either - they may be afraid to patronize you. <strong>Don’t be afraid to ask for help when you need it.</strong> Sometimes I get scared that people will think I’m stupid for not being able to figure something out, especially if I’ve been stuck on that problem for awhile. If you’ve made a reasonable effort and you’re still blocked, it’s smarter to get someone’s help than to remain stuck for that much longer. <strong>Generally, I try to ask for help from a more experienced engineer if I’ve been blocked for more than one or two hours.</strong></p><p>  Some senior engineers have told me that it can be difficult to fill in the gaps for someone whose context they no longer have. It’s like a rocket scientist trying to teach math to a fifth grader. They don’t remember what it’s like to be a fifth grader anymore. It is easier for them to teach when they assume you don’t know anything, and then ask you what you already understand as they’re teaching you.</p><p>  <strong>Ways to help your fellow engineer better help <em>you</em></strong>:</p><ol><li><p>Being able to clearly identify when you don’t understand something <em>and being able to admit it</em>.</p></li><li><p>Having specific and detailed questions to ask.</p></li><li><p>Clearly communicating concepts that you already know or making connections between the new things they’re teaching you and what you already know.</p></li><li><p>Explaining the solutions you’ve already attempted, instead of asking for help by saying “I don’t know what’s happening or what this is doing.” and expecting the other engineer to do all the detective work for you.</p></li></ol><hr><p>You can do it! Getting unstuck gets easier as time goes on and you develop more of an intuition for the domain you’re working in. :)</p>]]></content>
      
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> public </tag>
            
            <tag> software engineering </tag>
            
            <tag> learning how to learn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2019/01/18/hello-world/"/>
      <url>/2019/01/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>This is my first blog post of 2019! I had some difficulty finding a blog generator that didn’t have a ton of bells and whistles that I didn’t need, but I finally found <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> - and some nice person had also built a <a href="https://www.npmjs.com/package/hexo-blog-encrypt" target="_blank" rel="noopener">plugin</a> to help encrypt pages that you want to keep private. (Other options I considered: Hugo, Jekyll, just using Google Sites like I used to.)</p><p>I don’t know if I’m going to write any public blog posts yet, but it’s nice to have the option to be able to do that in the future. I also really like the themes that were available - <a href="https://github.com/probberechts/hexo-theme-cactus" target="_blank" rel="noopener">this one</a> is really simple and clean!</p><p>I still have to do more reading of the Hexo docs to figure out how all this works - ideally I’m able to exclude personal blog posts from the list of any technical writing that I end up doing.</p><p>(Also things on this website may be periodically broken or look weird because I’m messing around with the theme’s CSS and I don’t have a lot of experience doing front end yet. It’s fun learning about it though! So far.)</p>]]></content>
      
      
      
        <tags>
            
            <tag> ramblings </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>persistence</title>
      <link href="/2018/07/20/persistence/"/>
      <url>/2018/07/20/persistence/</url>
      
        <content type="html"><![CDATA[<p>“If he never gave up,<br>does that make him a hero?<br>Or a fool?”</p>]]></content>
      
      
      
        <tags>
            
            <tag> poetry </tag>
            
            <tag> public </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loneliness</title>
      <link href="/2016/11/04/loneliness/"/>
      <url>/2016/11/04/loneliness/</url>
      
        <content type="html"><![CDATA[<p>think of death:<br>a small pale girl crouched<br>in her mother’s favorite jacket,<br>queen of empty playground swings.</p>]]></content>
      
      
      
        <tags>
            
            <tag> poetry </tag>
            
            <tag> public </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thought highway</title>
      <link href="/2015/08/24/thought-highway/"/>
      <url>/2015/08/24/thought-highway/</url>
      
        <content type="html"><![CDATA[<p><br><br><img class="figure" src="https://66.media.tumblr.com/7329021634a2f362083ecff6c4f3d368/tumblr_ntlo3gbO2l1uys5hto3_r1_1280.png" width="50%"/><img src="https://66.media.tumblr.com/696cd22725a6b1e46a38fa6663841060/tumblr_ntlo3gbO2l1uys5hto2_r1_1280.png" width="50%" class="figure"/></p><p><center><em>i’m zipping down the thought highway<br>on every billboard i see your face</em></center><br><br><br><br></p>]]></content>
      
      
      
        <tags>
            
            <tag> poetry </tag>
            
            <tag> public </tag>
            
            <tag> art </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>aquaria</title>
      <link href="/aquaria/index.html"/>
      <url>/aquaria/index.html</url>
      
        <content type="html"><![CDATA[<center><br>i’ve kept <a href="https://en.wikipedia.org/wiki/Poecilia_wingei" target="_blank" rel="noopener">endler’s livebearers</a>, <a href="https://en.wikipedia.org/wiki/Neocaridina_davidi" target="_blank" rel="noopener">dwarf shrimp</a>, <a href="https://en.wikipedia.org/wiki/Palaemonetes_paludosus" target="_blank" rel="noopener">ghost shrimp</a>, <a href="https://en.wikipedia.org/wiki/Siamese_fighting_fish" target="_blank" rel="noopener">bettas</a>, <a href="https://en.wikipedia.org/wiki/Pygmy_gourami" target="_blank" rel="noopener">sparkling gourami</a>, <a href="https://en.wikipedia.org/wiki/Kuhli_loach" target="_blank" rel="noopener">kuhli loaches</a>, and <a href="https://en.wikipedia.org/wiki/Japanese_rice_fish" target="_blank" rel="noopener">rice fish</a>. my favorite fish are the sparkling gourami because they always look so inquisitive when they’re swimming around. here are some pictures &amp; gifs taken with a phone camera - the page might take a little while to load because of the amount of media content.</center><center><br>—<br><strong>endler’s livebearers</strong><br>—<br><a href="https://i.imgur.com/oW5TtjM.gif" target="_blank" rel="noopener"><img src="https://i.imgur.com/oW5TtjM.gif" width="50%" class="figure"/></a><a href="https://i.imgur.com/uXHiaMs.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/uXHiaMs.jpg" width="50%" class="figure"/></a><!-- <a href="https://i.imgur.com/SQ4iwNp.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/SQ4iwNp.jpg" width="50%" class="figure"/></a><a href="https://i.imgur.com/Mqw1xjl.gif" target="_blank" rel="noopener"><img src="https://i.imgur.com/Mqw1xjl.gif" width="50%" class="figure"/></a> --><br>—<br><strong>shrimp tank</strong><br>—<br><a href="https://i.imgur.com/0Hfu63t.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/0Hfu63t.jpg" width="50%" class="figure"></a><a href="https://i.imgur.com/JLjbchJ.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/JLjbchJ.jpg" width="50%" class="figure"></a><br>—<br><strong>dwarf &amp; ghost shrimp</strong><br>—<br><a href="https://i.imgur.com/QwL4HIa.gif" target="_blank" rel="noopener"><img src="https://i.imgur.com/QwL4HIa.gif" width="50%" class="figure"></a><!-- <a href="https://i.imgur.com/Z1aXY0D.gif" target="_blank" rel="noopener"><img src="https://i.imgur.com/Z1aXY0D.gif" width="50%" class="figure"></a>--><a href="https://i.imgur.com/k2No0AF.gif" target="_blank" rel="noopener"> <img src="https://i.imgur.com/k2No0AF.gif" width="50%" class="figure"></a><!--<a href="https://i.imgur.com/uHFL4eG.gif" target="_blank" rel="noopener"><img src="https://i.imgur.com/uHFL4eG.gif" width="50%" class="figure"></a> --><br></center><!-- **shrimp tank after 2 months**---<a href="https://i.imgur.com/J0iPlZc.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/J0iPlZc.jpg" width="50%" class="figure"></a><a href="https://i.imgur.com/9Gl08q3.jpg" target="_blank" rel="noopener"><img src="https://i.imgur.com/9Gl08q3.jpg" width="50%" class="figure"></a>--- --><!-- [tank temperatures](https://io.adafruit.com/liftm/dashboards/fish) --><!-- [tank temperature monitoring code](https://github.com/goodbuns/fishmon) -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>art</title>
      <link href="/art/index.html"/>
      <url>/art/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>reading list</title>
      <link href="/reading/index.html"/>
      <url>/reading/index.html</url>
      
        <content type="html"><![CDATA[<p>some books i’ve enjoyed:</p><ul><li><a href="https://www.goodreads.com/book/show/2612.The_Tipping_Point" target="_blank" rel="noopener">The Tipping Point: How Little Things Can Make a Big Difference</a> by Malcolm Gladwell</li><li><a href="https://www.goodreads.com/book/show/198505.The_Demon_in_the_Freezer" target="_blank" rel="noopener">The Demon in the Freezer: A True Story</a> and <a href="https://www.goodreads.com/book/show/44526650-crisis-in-the-red-zone" target="_blank" rel="noopener">Crisis in the Red Zone: The Story of the Deadliest Ebola Outbreak in History, and of the Outbreaks to Come</a> by Richard Preston</li><li><a href="https://www.goodreads.com/book/show/20696006-being-mortal" target="_blank" rel="noopener">Being Mortal: Medicine and What Matters in the End</a> by Atul Gawande</li><li><a href="https://www.goodreads.com/book/show/12609.The_Spirit_Catches_You_and_You_Fall_Down" target="_blank" rel="noopener">The Spirit Catches You and You Fall Down: A Hmong Child, Her American Doctors, and the Collision of Two Cultures</a> by Anne Fadiman</li><li><a href="https://www.goodreads.com/book/show/6493208-the-immortal-life-of-henrietta-lacks" target="_blank" rel="noopener">The Immortal Life of Henrietta Lacks</a> by Rebecca Skloot</li><li><a href="https://www.goodreads.com/book/show/7613.Animal_Farm" target="_blank" rel="noopener">Animal Farm</a> by George Orwell</li><li><a href="https://www.goodreads.com/book/show/18713259-worm" target="_blank" rel="noopener">Worm</a> by Wildbow</li><li>…</li></ul><p>books i’ve been meaning to get around to:</p><ul><li>Normal People by Sally Rooney</li><li>How to Disappear: Notes on Invisibility in a Time of Transparency by Akiko Busch</li><li>maid by Stephanie Land</li><li>All the Light We Cannot See by Anthony Doerr</li><li>The Snow Child by Eowyn Ivey</li><li>Code Blue: Inside America’s Medical Industrial Complex by Mike Magee, MD</li><li>Range: Why Generalists Triumph in a Specialized World by David Epstein</li><li>The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations by Gene Kim, Jez Humble, Patrick Debois</li><li>…</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>search</title>
      <link href="/search/index.html"/>
      <url>/search/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
